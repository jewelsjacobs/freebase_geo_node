{
  "author": {
    "name": "Spencer Kelly",
    "email": "spencerwater@gmail.com",
    "url": "http://spencermounta.in"
  },
  "name": "slow",
  "description": "keep your pants on, async requests",
  "version": "0.0.10",
  "repository": {
    "type": "git",
    "url": "https://github.com/spencermountain/slow.git"
  },
  "main": "slow.js",
  "engines": [
    "node >= 0.3.6"
  ],
  "dependencies": {},
  "readme": "#Keep your pants on, javascript.\n###don't __blow your stack__, or over-async a nice web service.\n\n__slow is smooth, smooth is fast.__\n\n\nit goes,\n\n     npm install slow\n\n```javascript\nslow=require('slow');\nslow.walk( [1,2,3,4], random_wait, console.log);//results, in order\n\nfunction random_wait(i, callback){\n  setTimeout(callbck(i), Math.random()*4000);\n}\n```\n\nunlike the ___[other](https://github.com/tatumizer/mesh) [woderful](https://raw.github.com/caolan/async) [async](https://github.com/kriszyp/node-promise) [libraries](http://tamejs.org)___,\nthis one lets you set the pace.\n\nso you don't _immediately do everything_ at once.\n\n###like some fool.\n\nyou can be safe with memory and respect external services.\n#the methods are:\n\n##rate-limited\n_explicitly set a pace, but respect a maximum current request rate (defaults to 10)_\n\n_(it begins at this pace, but slows it down if callbacks begin to build-up)_\n\n* __slow.pace__ ( _arr, fn, [options], callback_ ) _//60bpm_\n* __slow.walk__ ( _arr, fn, [options], callback_ ) _//[120bpm](http://www.wolframalpha.com/input/?i=average+walking+pace)_\n* __slow.jog__ ( _arr, fn, [options], callback_ ) _//150bpm_\n* __slow.run__ ( _arr, fn, [options], callback_ ) _//180bpm_\n* __slow.heartbeat__ ( _arr, fn, [options], callback_ ) _//72bpm_\n\n\n##count-limited\n_do only a few things at a time._\n_(only go as fast as your callback does)_\n\n* __slow.steady__ ( _arr, fn, [options], callback_ )  _//max=5_\n* __slow.handful__ ( _arr, fn, [options], callback_ ) _//max=3_\n* __slow.pocket__ ( _arr, fn, [options], callback_ )  _//max=7_\n* __slow.backpack__ ( _arr, fn, [options], callback_ ) _//max=15_\n* __slow.shovel__ ( _arr, fn, [options], callback_ ) _//max=35_\n\n##the _options_ are:\n```javascript\n{\n debug: true, //understand when the requests are being fired\n verbose: true, //include the input in the results\n monitor: function(r){console.log(r.length)}, //watch the results coming in in real-time\n max: 10 //the most number of concurrent requests you're comfortable making\n}\n```\nbut you can just ignore those tho\n\n##in the f-ing Browzers!1\n(2.8k)\n```html\n<script src=\"https://raw.github.com/spencermountain/slow/master/slow.min.js\"></script>\n<script>\n  slow.__walk__( [1,2,3,4,5,6,7], my_function, {max:3}, function(r){\n    alert(r.join(', '))\n  })\n  function my_function(q, callback){\n    var x=Math.floor(Math.random()*2000)\n    setTimeout(function(){callback(\"finished \"+q+\" in \"+x+\"ms\")}, x)\n  }\n</script>\n```\n##what about my craziness..\nif you're in a situation that needs fancy paramaters, wrap them up like this:\n```javascript\nslow.steady( [1,2,3,4], whatev, console.log);\nfunction whatev(i, callback){\n  my_craziness(param1, param2, then_finally, a, callback) //works fine\n}\n```\nor if your function returns __[errror, result]__  (i hate that)\n```javascript\nslow.steady( [1,2,3,4], whatev, console.log);\nfunction whatev(i, callback){\n  my_craziness(i, function(err, result){\n    callback(result||err);//la de da;)\n  })\n}\n```\n\n## boogers\nMIT",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/spencermountain/slow/issues"
  },
  "_id": "slow@0.0.10",
  "_from": "slow@0.0.10"
}
